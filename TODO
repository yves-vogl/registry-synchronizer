- Documentation and configuration needs some improvements
- Do some benchmarking and try to guess the best concurrency
- Improved error handling
- Releasing a package and create a binstub
- Add Travis for testing
- Release a containerized version on DockerHub
- Iterate on Boto3 objects for more than 1000 results
- Support different identities
- Handle image tag immutability on target
- if explicit exclude is given only the repos in the include string needs to be fetched from remote
- If no transformations are specified its a 1:1 mapping so only the included repos need to be fetched (or the ones from the source registry)
- also make repos iterable
- Add testing and code documentation - it's getting to complex without
- Allow regexp and semver for include parameter
- When specifying include, also allow to specify explicit repo pendant which gets used instead of transformations or direct match
- Add version string to app which corresponds with git tag
- Implement queue pattern as the current approach waits for 10 completed objects (and not for free slots)
- If container has more than one tag, migrate all tags
- Create logic to transform tags (e.g. to remove certain suffixes)


Describe use cases:

- Customer migrates a big repo to different ones
- Maybe one wants to have an image replicated to more than one region, e.g.
  build it in us-west-1 (e.g. on CircleCI) and have only traffic locally, but use it in
  other region(s).
  Then you either make a lot of traffic between us-west-1 and other regions or have CircleCI build
  in the target region. Both ways make inter-regional traffic.
  It could be cheaper to decouple this, e.g. when either using more build traffic than usage or either way around.

- One would like to pull (non-ecr) images to mirror them locally and have them under control (and scanned)
  This would lead to the idea of implementing other registries or opening up for plugins


- With a combination of include and a true-evaluating transformation you can populate 1:n repos for bootstrapping / scaffolding purposes

- Check if replicating is really needed or if there are other more native ways (ECR Proxy)
- Check if we can rid of the docker client / lib an implement the protocol and if it's reasonable
- Check if we can use other image handling tools than docker / lib or doing it with the API
- Between ECR maybe we can use presigned URLs to avoid local copying (check for caching!)
- When offloading the Kubernetes DIND then the cache gets thrown away. Check how this can be avoided or even the cache could be safely shared with other workers
- When not using docker anymore make sure that caching is in place
- Make caching optional


# Main

- Use more powerful CLI interface (https://realpython.com/comparing-python-command-line-parsing-libraries-argparse-docopt-click)

# Docker

Dockerize the tool and describe the different use cases:

- standalone
- distributed
  Description:
    1. main: Creates jobs and pushes them to a Redis instance, then exits
    2. worker: Connects to a redis instance, fetches a job, executes it.


Notes:

Implement automates build, test, tag (release)



# Kubernetes

- Stateful set for Redis and the main component (which creates and publishes jobs)
- Deployment and HPA for spawning concurrent workers (which fetch their stuff from Redis)

Either everything is run like job,


A (Cron)Job:
- so python3 app/main.py --mapfile maps/example.yaml [--concurrency 5] queue is run once

A deployment:
- workers start, work and wait if nothing is available to do

HPA takes care of scaling the deployment.
